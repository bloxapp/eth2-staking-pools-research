// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	core "github.com/bloxapp/eth2-staking-pools-research/go-spec/src/core"
	gomock "github.com/golang/mock/gomock"
	bls "github.com/herumi/bls-eth-go-binary/bls"
	reflect "reflect"
)

// MockIState is a mock of IState interface
type MockIState struct {
	ctrl     *gomock.Controller
	recorder *MockIStateMockRecorder
}

// MockIStateMockRecorder is the mock recorder for MockIState
type MockIStateMockRecorder struct {
	mock *MockIState
}

// NewMockIState creates a new mock instance
func NewMockIState(ctrl *gomock.Controller) *MockIState {
	mock := &MockIState{ctrl: ctrl}
	mock.recorder = &MockIStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIState) EXPECT() *MockIStateMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockIState) Copy() (core.IState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(core.IState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockIStateMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIState)(nil).Copy))
}

// Root mocks base method
func (m *MockIState) Root() ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Root indicates an expected call of Root
func (mr *MockIStateMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockIState)(nil).Root))
}

// GetPools mocks base method
func (m *MockIState) GetPools() []core.IPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPools")
	ret0, _ := ret[0].([]core.IPool)
	return ret0
}

// GetPools indicates an expected call of GetPools
func (mr *MockIStateMockRecorder) GetPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPools", reflect.TypeOf((*MockIState)(nil).GetPools))
}

// GetPool mocks base method
func (m *MockIState) GetPool(id uint64) core.IPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", id)
	ret0, _ := ret[0].(core.IPool)
	return ret0
}

// GetPool indicates an expected call of GetPool
func (mr *MockIStateMockRecorder) GetPool(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockIState)(nil).GetPool), id)
}

// GetBlockProducers mocks base method
func (m *MockIState) GetBlockProducers() []core.IBlockProducer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducers")
	ret0, _ := ret[0].([]core.IBlockProducer)
	return ret0
}

// GetBlockProducers indicates an expected call of GetBlockProducers
func (mr *MockIStateMockRecorder) GetBlockProducers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducers", reflect.TypeOf((*MockIState)(nil).GetBlockProducers))
}

// GetBlockProducer mocks base method
func (m *MockIState) GetBlockProducer(id uint64) core.IBlockProducer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducer", id)
	ret0, _ := ret[0].(core.IBlockProducer)
	return ret0
}

// GetBlockProducer indicates an expected call of GetBlockProducer
func (mr *MockIStateMockRecorder) GetBlockProducer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducer", reflect.TypeOf((*MockIState)(nil).GetBlockProducer), id)
}

// GetCurrentEpoch mocks base method
func (m *MockIState) GetCurrentEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentEpoch indicates an expected call of GetCurrentEpoch
func (mr *MockIStateMockRecorder) GetCurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEpoch", reflect.TypeOf((*MockIState)(nil).GetCurrentEpoch))
}

// SetCurrentEpoch mocks base method
func (m *MockIState) SetCurrentEpoch(epoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentEpoch", epoch)
}

// SetCurrentEpoch indicates an expected call of SetCurrentEpoch
func (mr *MockIStateMockRecorder) SetCurrentEpoch(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEpoch", reflect.TypeOf((*MockIState)(nil).SetCurrentEpoch), epoch)
}

// GetSeed mocks base method
func (m *MockIState) GetSeed(epoch uint64) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeed", epoch)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetSeed indicates an expected call of GetSeed
func (mr *MockIStateMockRecorder) GetSeed(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeed", reflect.TypeOf((*MockIState)(nil).GetSeed), epoch)
}

// SetSeed mocks base method
func (m *MockIState) SetSeed(seed [32]byte, epoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSeed", seed, epoch)
}

// SetSeed indicates an expected call of SetSeed
func (mr *MockIStateMockRecorder) SetSeed(seed, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeed", reflect.TypeOf((*MockIState)(nil).SetSeed), seed, epoch)
}

// GetPastSeed mocks base method
func (m *MockIState) GetPastSeed(epoch uint64) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastSeed", epoch)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetPastSeed indicates an expected call of GetPastSeed
func (mr *MockIStateMockRecorder) GetPastSeed(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastSeed", reflect.TypeOf((*MockIState)(nil).GetPastSeed), epoch)
}

// GetBlockRoot mocks base method
func (m *MockIState) GetBlockRoot(epoch uint64) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRoot", epoch)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetBlockRoot indicates an expected call of GetBlockRoot
func (mr *MockIStateMockRecorder) GetBlockRoot(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRoot", reflect.TypeOf((*MockIState)(nil).GetBlockRoot), epoch)
}

// SetBlockRoot mocks base method
func (m *MockIState) SetBlockRoot(root [32]byte, epoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockRoot", root, epoch)
}

// SetBlockRoot indicates an expected call of SetBlockRoot
func (mr *MockIStateMockRecorder) SetBlockRoot(root, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockRoot", reflect.TypeOf((*MockIState)(nil).SetBlockRoot), root, epoch)
}

// GetStateRoot mocks base method
func (m *MockIState) GetStateRoot(epoch uint64) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot", epoch)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetStateRoot indicates an expected call of GetStateRoot
func (mr *MockIStateMockRecorder) GetStateRoot(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MockIState)(nil).GetStateRoot), epoch)
}

// SetStateRoot mocks base method
func (m *MockIState) SetStateRoot(root [32]byte, epoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateRoot", root, epoch)
}

// SetStateRoot indicates an expected call of SetStateRoot
func (mr *MockIStateMockRecorder) SetStateRoot(root, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateRoot", reflect.TypeOf((*MockIState)(nil).SetStateRoot), root, epoch)
}

// PoolCommittee mocks base method
func (m *MockIState) PoolCommittee(poolId, epoch uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolCommittee", poolId, epoch)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolCommittee indicates an expected call of PoolCommittee
func (mr *MockIStateMockRecorder) PoolCommittee(poolId, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolCommittee", reflect.TypeOf((*MockIState)(nil).PoolCommittee), poolId, epoch)
}

// DKGCommittee mocks base method
func (m *MockIState) DKGCommittee(reqId, epoch uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DKGCommittee", reqId, epoch)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DKGCommittee indicates an expected call of DKGCommittee
func (mr *MockIStateMockRecorder) DKGCommittee(reqId, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DKGCommittee", reflect.TypeOf((*MockIState)(nil).DKGCommittee), reqId, epoch)
}

// BlockVotingCommittee mocks base method
func (m *MockIState) BlockVotingCommittee(epoch uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockVotingCommittee", epoch)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockVotingCommittee indicates an expected call of BlockVotingCommittee
func (mr *MockIStateMockRecorder) BlockVotingCommittee(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockVotingCommittee", reflect.TypeOf((*MockIState)(nil).BlockVotingCommittee), epoch)
}

// GetBlockProposer mocks base method
func (m *MockIState) GetBlockProposer(epoch uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProposer", epoch)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProposer indicates an expected call of GetBlockProposer
func (mr *MockIStateMockRecorder) GetBlockProposer(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProposer", reflect.TypeOf((*MockIState)(nil).GetBlockProposer), epoch)
}

// ValidateBlock mocks base method
func (m *MockIState) ValidateBlock(header core.IBlockHeader, body core.IBlockBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBlock", header, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBlock indicates an expected call of ValidateBlock
func (mr *MockIStateMockRecorder) ValidateBlock(header, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlock", reflect.TypeOf((*MockIState)(nil).ValidateBlock), header, body)
}

// ProcessPoolExecutions mocks base method
func (m *MockIState) ProcessPoolExecutions(summaries []core.IExecutionSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPoolExecutions", summaries)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPoolExecutions indicates an expected call of ProcessPoolExecutions
func (mr *MockIStateMockRecorder) ProcessPoolExecutions(summaries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPoolExecutions", reflect.TypeOf((*MockIState)(nil).ProcessPoolExecutions), summaries)
}

// ProcessNewPoolRequests mocks base method
func (m *MockIState) ProcessNewPoolRequests(requests []core.ICreatePoolRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNewPoolRequests", requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNewPoolRequests indicates an expected call of ProcessNewPoolRequests
func (mr *MockIStateMockRecorder) ProcessNewPoolRequests(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewPoolRequests", reflect.TypeOf((*MockIState)(nil).ProcessNewPoolRequests), requests)
}

// ProcessNewBlock mocks base method
func (m *MockIState) ProcessNewBlock(newBlockHeader core.IBlockHeader, newBlockBody core.IBlockBody) (core.IState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNewBlock", newBlockHeader, newBlockBody)
	ret0, _ := ret[0].(core.IState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessNewBlock indicates an expected call of ProcessNewBlock
func (mr *MockIStateMockRecorder) ProcessNewBlock(newBlockHeader, newBlockBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewBlock", reflect.TypeOf((*MockIState)(nil).ProcessNewBlock), newBlockHeader, newBlockBody)
}

// MockIPool is a mock of IPool interface
type MockIPool struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolMockRecorder
}

// MockIPoolMockRecorder is the mock recorder for MockIPool
type MockIPoolMockRecorder struct {
	mock *MockIPool
}

// NewMockIPool creates a new mock instance
func NewMockIPool(ctrl *gomock.Controller) *MockIPool {
	mock := &MockIPool{ctrl: ctrl}
	mock.recorder = &MockIPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPool) EXPECT() *MockIPoolMockRecorder {
	return m.recorder
}

// IsActive mocks base method
func (m *MockIPool) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *MockIPoolMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockIPool)(nil).IsActive))
}

// SetActive mocks base method
func (m *MockIPool) SetActive(status bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActive", status)
}

// SetActive indicates an expected call of SetActive
func (mr *MockIPoolMockRecorder) SetActive(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockIPool)(nil).SetActive), status)
}

// GetId mocks base method
func (m *MockIPool) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockIPoolMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIPool)(nil).GetId))
}

// GetPubKey mocks base method
func (m *MockIPool) GetPubKey() (*bls.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKey")
	ret0, _ := ret[0].(*bls.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubKey indicates an expected call of GetPubKey
func (mr *MockIPoolMockRecorder) GetPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKey", reflect.TypeOf((*MockIPool)(nil).GetPubKey))
}

// GetSortedExecutors mocks base method
func (m *MockIPool) GetSortedExecutors() []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedExecutors")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// GetSortedExecutors indicates an expected call of GetSortedExecutors
func (mr *MockIPoolMockRecorder) GetSortedExecutors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedExecutors", reflect.TypeOf((*MockIPool)(nil).GetSortedExecutors))
}

// SetSortedExecutors mocks base method
func (m *MockIPool) SetSortedExecutors(executors []uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSortedExecutors", executors)
}

// SetSortedExecutors indicates an expected call of SetSortedExecutors
func (mr *MockIPoolMockRecorder) SetSortedExecutors(executors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSortedExecutors", reflect.TypeOf((*MockIPool)(nil).SetSortedExecutors), executors)
}

// MockIBlockBody is a mock of IBlockBody interface
type MockIBlockBody struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockBodyMockRecorder
}

// MockIBlockBodyMockRecorder is the mock recorder for MockIBlockBody
type MockIBlockBodyMockRecorder struct {
	mock *MockIBlockBody
}

// NewMockIBlockBody creates a new mock instance
func NewMockIBlockBody(ctrl *gomock.Controller) *MockIBlockBody {
	mock := &MockIBlockBody{ctrl: ctrl}
	mock.recorder = &MockIBlockBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBlockBody) EXPECT() *MockIBlockBodyMockRecorder {
	return m.recorder
}

// GetEpochNumber mocks base method
func (m *MockIBlockBody) GetEpochNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEpochNumber indicates an expected call of GetEpochNumber
func (mr *MockIBlockBodyMockRecorder) GetEpochNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochNumber", reflect.TypeOf((*MockIBlockBody)(nil).GetEpochNumber))
}

// GetProposer mocks base method
func (m *MockIBlockBody) GetProposer() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetProposer indicates an expected call of GetProposer
func (mr *MockIBlockBodyMockRecorder) GetProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockIBlockBody)(nil).GetProposer))
}

// GetExecutionSummaries mocks base method
func (m *MockIBlockBody) GetExecutionSummaries() []core.IExecutionSummary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionSummaries")
	ret0, _ := ret[0].([]core.IExecutionSummary)
	return ret0
}

// GetExecutionSummaries indicates an expected call of GetExecutionSummaries
func (mr *MockIBlockBodyMockRecorder) GetExecutionSummaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionSummaries", reflect.TypeOf((*MockIBlockBody)(nil).GetExecutionSummaries))
}

// GetNewPoolRequests mocks base method
func (m *MockIBlockBody) GetNewPoolRequests() []core.ICreatePoolRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPoolRequests")
	ret0, _ := ret[0].([]core.ICreatePoolRequest)
	return ret0
}

// GetNewPoolRequests indicates an expected call of GetNewPoolRequests
func (mr *MockIBlockBodyMockRecorder) GetNewPoolRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPoolRequests", reflect.TypeOf((*MockIBlockBody)(nil).GetNewPoolRequests))
}

// GetStateRoot mocks base method
func (m *MockIBlockBody) GetStateRoot() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetStateRoot indicates an expected call of GetStateRoot
func (mr *MockIBlockBodyMockRecorder) GetStateRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MockIBlockBody)(nil).GetStateRoot))
}

// GetParentBlockRoot mocks base method
func (m *MockIBlockBody) GetParentBlockRoot() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentBlockRoot")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetParentBlockRoot indicates an expected call of GetParentBlockRoot
func (mr *MockIBlockBodyMockRecorder) GetParentBlockRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentBlockRoot", reflect.TypeOf((*MockIBlockBody)(nil).GetParentBlockRoot))
}

// Root mocks base method
func (m *MockIBlockBody) Root() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Root indicates an expected call of Root
func (mr *MockIBlockBodyMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockIBlockBody)(nil).Root))
}

// Validate mocks base method
func (m *MockIBlockBody) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockIBlockBodyMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIBlockBody)(nil).Validate))
}

// MockIBlockHeader is a mock of IBlockHeader interface
type MockIBlockHeader struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockHeaderMockRecorder
}

// MockIBlockHeaderMockRecorder is the mock recorder for MockIBlockHeader
type MockIBlockHeaderMockRecorder struct {
	mock *MockIBlockHeader
}

// NewMockIBlockHeader creates a new mock instance
func NewMockIBlockHeader(ctrl *gomock.Controller) *MockIBlockHeader {
	mock := &MockIBlockHeader{ctrl: ctrl}
	mock.recorder = &MockIBlockHeaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBlockHeader) EXPECT() *MockIBlockHeaderMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockIBlockHeader) Copy() core.IBlockHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(core.IBlockHeader)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockIBlockHeaderMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIBlockHeader)(nil).Copy))
}

// Validate mocks base method
func (m *MockIBlockHeader) Validate(bp core.IBlockProducer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", bp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockIBlockHeaderMockRecorder) Validate(bp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIBlockHeader)(nil).Validate), bp)
}

// GetBlockRoot mocks base method
func (m *MockIBlockHeader) GetBlockRoot() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRoot")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBlockRoot indicates an expected call of GetBlockRoot
func (mr *MockIBlockHeaderMockRecorder) GetBlockRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRoot", reflect.TypeOf((*MockIBlockHeader)(nil).GetBlockRoot))
}

// GetSignature mocks base method
func (m *MockIBlockHeader) GetSignature() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSignature indicates an expected call of GetSignature
func (mr *MockIBlockHeaderMockRecorder) GetSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockIBlockHeader)(nil).GetSignature))
}

// MockIBeaconDuty is a mock of IBeaconDuty interface
type MockIBeaconDuty struct {
	ctrl     *gomock.Controller
	recorder *MockIBeaconDutyMockRecorder
}

// MockIBeaconDutyMockRecorder is the mock recorder for MockIBeaconDuty
type MockIBeaconDutyMockRecorder struct {
	mock *MockIBeaconDuty
}

// NewMockIBeaconDuty creates a new mock instance
func NewMockIBeaconDuty(ctrl *gomock.Controller) *MockIBeaconDuty {
	mock := &MockIBeaconDuty{ctrl: ctrl}
	mock.recorder = &MockIBeaconDutyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBeaconDuty) EXPECT() *MockIBeaconDutyMockRecorder {
	return m.recorder
}

// GetType mocks base method
func (m *MockIBeaconDuty) GetType() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockIBeaconDutyMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIBeaconDuty)(nil).GetType))
}

// GetCommittee mocks base method
func (m *MockIBeaconDuty) GetCommittee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCommittee indicates an expected call of GetCommittee
func (mr *MockIBeaconDutyMockRecorder) GetCommittee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittee", reflect.TypeOf((*MockIBeaconDuty)(nil).GetCommittee))
}

// GetSlot mocks base method
func (m *MockIBeaconDuty) GetSlot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSlot indicates an expected call of GetSlot
func (mr *MockIBeaconDutyMockRecorder) GetSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockIBeaconDuty)(nil).GetSlot))
}

// IsFinalized mocks base method
func (m *MockIBeaconDuty) IsFinalized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinalized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinalized indicates an expected call of IsFinalized
func (mr *MockIBeaconDutyMockRecorder) IsFinalized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinalized", reflect.TypeOf((*MockIBeaconDuty)(nil).IsFinalized))
}

// GetParticipation mocks base method
func (m *MockIBeaconDuty) GetParticipation() [16]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipation")
	ret0, _ := ret[0].([16]byte)
	return ret0
}

// GetParticipation indicates an expected call of GetParticipation
func (mr *MockIBeaconDutyMockRecorder) GetParticipation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipation", reflect.TypeOf((*MockIBeaconDuty)(nil).GetParticipation))
}

// MockIExecutionSummary is a mock of IExecutionSummary interface
type MockIExecutionSummary struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutionSummaryMockRecorder
}

// MockIExecutionSummaryMockRecorder is the mock recorder for MockIExecutionSummary
type MockIExecutionSummaryMockRecorder struct {
	mock *MockIExecutionSummary
}

// NewMockIExecutionSummary creates a new mock instance
func NewMockIExecutionSummary(ctrl *gomock.Controller) *MockIExecutionSummary {
	mock := &MockIExecutionSummary{ctrl: ctrl}
	mock.recorder = &MockIExecutionSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExecutionSummary) EXPECT() *MockIExecutionSummaryMockRecorder {
	return m.recorder
}

// GetPoolId mocks base method
func (m *MockIExecutionSummary) GetPoolId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPoolId indicates an expected call of GetPoolId
func (mr *MockIExecutionSummaryMockRecorder) GetPoolId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolId", reflect.TypeOf((*MockIExecutionSummary)(nil).GetPoolId))
}

// GetEpoch mocks base method
func (m *MockIExecutionSummary) GetEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch
func (mr *MockIExecutionSummaryMockRecorder) GetEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockIExecutionSummary)(nil).GetEpoch))
}

// GetDuties mocks base method
func (m *MockIExecutionSummary) GetDuties() []core.IBeaconDuty {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuties")
	ret0, _ := ret[0].([]core.IBeaconDuty)
	return ret0
}

// GetDuties indicates an expected call of GetDuties
func (mr *MockIExecutionSummaryMockRecorder) GetDuties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuties", reflect.TypeOf((*MockIExecutionSummary)(nil).GetDuties))
}

// ApplyOnState mocks base method
func (m *MockIExecutionSummary) ApplyOnState(state core.IState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOnState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOnState indicates an expected call of ApplyOnState
func (mr *MockIExecutionSummaryMockRecorder) ApplyOnState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOnState", reflect.TypeOf((*MockIExecutionSummary)(nil).ApplyOnState), state)
}

// MockIBlockProducer is a mock of IBlockProducer interface
type MockIBlockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockProducerMockRecorder
}

// MockIBlockProducerMockRecorder is the mock recorder for MockIBlockProducer
type MockIBlockProducerMockRecorder struct {
	mock *MockIBlockProducer
}

// NewMockIBlockProducer creates a new mock instance
func NewMockIBlockProducer(ctrl *gomock.Controller) *MockIBlockProducer {
	mock := &MockIBlockProducer{ctrl: ctrl}
	mock.recorder = &MockIBlockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBlockProducer) EXPECT() *MockIBlockProducerMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockIBlockProducer) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockIBlockProducerMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIBlockProducer)(nil).GetId))
}

// GetPubKey mocks base method
func (m *MockIBlockProducer) GetPubKey() (*bls.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKey")
	ret0, _ := ret[0].(*bls.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubKey indicates an expected call of GetPubKey
func (mr *MockIBlockProducerMockRecorder) GetPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKey", reflect.TypeOf((*MockIBlockProducer)(nil).GetPubKey))
}

// SetPubKey mocks base method
func (m *MockIBlockProducer) SetPubKey(pk []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPubKey", pk)
}

// SetPubKey indicates an expected call of SetPubKey
func (mr *MockIBlockProducerMockRecorder) SetPubKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPubKey", reflect.TypeOf((*MockIBlockProducer)(nil).SetPubKey), pk)
}

// GetBalance mocks base method
func (m *MockIBlockProducer) GetBalance() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockIBlockProducerMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIBlockProducer)(nil).GetBalance))
}

// GetStake mocks base method
func (m *MockIBlockProducer) GetStake() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStake")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStake indicates an expected call of GetStake
func (mr *MockIBlockProducerMockRecorder) GetStake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStake", reflect.TypeOf((*MockIBlockProducer)(nil).GetStake))
}

// IsSlashed mocks base method
func (m *MockIBlockProducer) IsSlashed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlashed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSlashed indicates an expected call of IsSlashed
func (mr *MockIBlockProducerMockRecorder) IsSlashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlashed", reflect.TypeOf((*MockIBlockProducer)(nil).IsSlashed))
}

// IsActive mocks base method
func (m *MockIBlockProducer) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *MockIBlockProducerMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockIBlockProducer)(nil).IsActive))
}

// SetExited mocks base method
func (m *MockIBlockProducer) SetExited(atEpoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExited", atEpoch)
}

// SetExited indicates an expected call of SetExited
func (mr *MockIBlockProducerMockRecorder) SetExited(atEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExited", reflect.TypeOf((*MockIBlockProducer)(nil).SetExited), atEpoch)
}

// GetExitEpoch mocks base method
func (m *MockIBlockProducer) GetExitEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetExitEpoch indicates an expected call of GetExitEpoch
func (mr *MockIBlockProducerMockRecorder) GetExitEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitEpoch", reflect.TypeOf((*MockIBlockProducer)(nil).GetExitEpoch))
}

// IncreaseBalance mocks base method
func (m *MockIBlockProducer) IncreaseBalance(change uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseBalance", change)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseBalance indicates an expected call of IncreaseBalance
func (mr *MockIBlockProducerMockRecorder) IncreaseBalance(change interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseBalance", reflect.TypeOf((*MockIBlockProducer)(nil).IncreaseBalance), change)
}

// DecreaseBalance mocks base method
func (m *MockIBlockProducer) DecreaseBalance(change uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseBalance", change)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseBalance indicates an expected call of DecreaseBalance
func (mr *MockIBlockProducerMockRecorder) DecreaseBalance(change interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseBalance", reflect.TypeOf((*MockIBlockProducer)(nil).DecreaseBalance), change)
}

// MockICreatePoolRequest is a mock of ICreatePoolRequest interface
type MockICreatePoolRequest struct {
	ctrl     *gomock.Controller
	recorder *MockICreatePoolRequestMockRecorder
}

// MockICreatePoolRequestMockRecorder is the mock recorder for MockICreatePoolRequest
type MockICreatePoolRequestMockRecorder struct {
	mock *MockICreatePoolRequest
}

// NewMockICreatePoolRequest creates a new mock instance
func NewMockICreatePoolRequest(ctrl *gomock.Controller) *MockICreatePoolRequest {
	mock := &MockICreatePoolRequest{ctrl: ctrl}
	mock.recorder = &MockICreatePoolRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICreatePoolRequest) EXPECT() *MockICreatePoolRequestMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockICreatePoolRequest) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockICreatePoolRequestMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetId))
}

// GetStatus mocks base method
func (m *MockICreatePoolRequest) GetStatus() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockICreatePoolRequestMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetStatus))
}

// GetStartEpoch mocks base method
func (m *MockICreatePoolRequest) GetStartEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStartEpoch indicates an expected call of GetStartEpoch
func (mr *MockICreatePoolRequestMockRecorder) GetStartEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartEpoch", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetStartEpoch))
}

// GetEndEpoch mocks base method
func (m *MockICreatePoolRequest) GetEndEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEndEpoch indicates an expected call of GetEndEpoch
func (mr *MockICreatePoolRequestMockRecorder) GetEndEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndEpoch", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetEndEpoch))
}

// GetLeaderBP mocks base method
func (m *MockICreatePoolRequest) GetLeaderBP() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderBP")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLeaderBP indicates an expected call of GetLeaderBP
func (mr *MockICreatePoolRequestMockRecorder) GetLeaderBP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderBP", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetLeaderBP))
}

// GetCreatePubKey mocks base method
func (m *MockICreatePoolRequest) GetCreatePubKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatePubKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCreatePubKey indicates an expected call of GetCreatePubKey
func (mr *MockICreatePoolRequestMockRecorder) GetCreatePubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatePubKey", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetCreatePubKey))
}

// GetParticipation mocks base method
func (m *MockICreatePoolRequest) GetParticipation() [16]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipation")
	ret0, _ := ret[0].([16]byte)
	return ret0
}

// GetParticipation indicates an expected call of GetParticipation
func (mr *MockICreatePoolRequestMockRecorder) GetParticipation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipation", reflect.TypeOf((*MockICreatePoolRequest)(nil).GetParticipation))
}

// Validate mocks base method
func (m *MockICreatePoolRequest) Validate(state core.IState, currentBP core.IBlockProducer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", state, currentBP)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockICreatePoolRequestMockRecorder) Validate(state, currentBP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockICreatePoolRequest)(nil).Validate), state, currentBP)
}
