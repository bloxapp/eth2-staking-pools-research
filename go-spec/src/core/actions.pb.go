// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/core/actions.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A request struct for creating new pool credentials
// will trigger random selection of 128 executors to DKG new pool credentials and wait for deposit
//
// How it works?
// - A user sends 32 eth and create pool request
// - The first BP that sees it, will post a CreatePoolRequest with Status 0 and will nominate the next BP as the leader for the DKG
//   (the 128 DKG participants are deterministically selected as well)
// - If during the next Epoch the DKG is successful, the BP (which is also the DKG leader) posts a CreatePoolRequest with the same ID,
//   Status 1 and the created pub key
// - If the DKG is un-successful, the BP will post a CreatePoolRequest with the same ID, Status 3 and will nominate the next BP as leader
//
// A successful DKG will reward the leader and DKG participants
// A non-successful DKG will penalized the DKG participants
type CreateNewPoolRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status               uint32   `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	StartEpoch           uint64   `protobuf:"varint,3,opt,name=StartEpoch,proto3" json:"StartEpoch,omitempty"`
	EndEpoch             uint64   `protobuf:"varint,4,opt,name=EndEpoch,proto3" json:"EndEpoch,omitempty"`
	LeaderBlockProducer  uint64   `protobuf:"varint,5,opt,name=LeaderBlockProducer,proto3" json:"LeaderBlockProducer,omitempty"`
	CreatePubKey         []byte   `protobuf:"bytes,6,opt,name=CreatePubKey,proto3" json:"CreatePubKey,omitempty"`
	Participation        []byte   `protobuf:"bytes,7,opt,name=Participation,proto3" json:"Participation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNewPoolRequest) Reset()         { *m = CreateNewPoolRequest{} }
func (m *CreateNewPoolRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNewPoolRequest) ProtoMessage()    {}
func (*CreateNewPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c8fa121d57ad5ce, []int{0}
}
func (m *CreateNewPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNewPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNewPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNewPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNewPoolRequest.Merge(m, src)
}
func (m *CreateNewPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNewPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNewPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNewPoolRequest proto.InternalMessageInfo

func (m *CreateNewPoolRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateNewPoolRequest) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CreateNewPoolRequest) GetStartEpoch() uint64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *CreateNewPoolRequest) GetEndEpoch() uint64 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

func (m *CreateNewPoolRequest) GetLeaderBlockProducer() uint64 {
	if m != nil {
		return m.LeaderBlockProducer
	}
	return 0
}

func (m *CreateNewPoolRequest) GetCreatePubKey() []byte {
	if m != nil {
		return m.CreatePubKey
	}
	return nil
}

func (m *CreateNewPoolRequest) GetParticipation() []byte {
	if m != nil {
		return m.Participation
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateNewPoolRequest)(nil), "state.CreateNewPoolRequest")
}

func init() { proto.RegisterFile("src/core/actions.proto", fileDescriptor_5c8fa121d57ad5ce) }

var fileDescriptor_5c8fa121d57ad5ce = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0xdd, 0x33, 0x39, 0x65, 0x48, 0x2c, 0x56, 0x09, 0x8b, 0xc5, 0x72, 0x04, 0x8b, 0xab,
	0x12, 0xc1, 0xd2, 0x2e, 0x92, 0x22, 0x28, 0x72, 0x5c, 0x3a, 0xbb, 0xcd, 0xee, 0x80, 0x87, 0x21,
	0x7b, 0xce, 0xce, 0x21, 0xbe, 0x89, 0x8f, 0x64, 0xe9, 0x23, 0xc8, 0xf9, 0x0e, 0xd6, 0x92, 0x8d,
	0x88, 0x07, 0x29, 0xff, 0xff, 0xfb, 0x8a, 0x99, 0x1f, 0x46, 0x81, 0xec, 0xd4, 0x7a, 0xc2, 0xa9,
	0xb1, 0x5c, 0xf9, 0x4d, 0x98, 0xd4, 0xe4, 0xd9, 0xcb, 0x7e, 0x60, 0xc3, 0x38, 0xfe, 0x16, 0x70,
	0x76, 0x43, 0x68, 0x18, 0xef, 0xf1, 0xa5, 0xf0, 0x7e, 0x5d, 0xe2, 0x73, 0x83, 0x81, 0xe5, 0x09,
	0x24, 0x0b, 0xa7, 0x44, 0x26, 0xf2, 0x5e, 0x99, 0x2c, 0x9c, 0x1c, 0x41, 0xba, 0x64, 0xc3, 0x4d,
	0x50, 0x49, 0x26, 0xf2, 0x61, 0xf9, 0x9b, 0xa4, 0x06, 0x58, 0xb2, 0x21, 0x9e, 0xd7, 0xde, 0x3e,
	0xaa, 0xc3, 0xe8, 0xff, 0x6b, 0xe4, 0x39, 0x1c, 0xcf, 0x37, 0x6e, 0x47, 0x7b, 0x91, 0xfe, 0x65,
	0x79, 0x09, 0xa7, 0x77, 0x68, 0x1c, 0xd2, 0x6c, 0xed, 0xed, 0x53, 0x41, 0xde, 0x35, 0x16, 0x49,
	0xf5, 0xa3, 0xb6, 0x0f, 0xc9, 0x31, 0x0c, 0x76, 0xd7, 0x16, 0xcd, 0xea, 0x16, 0x5f, 0x55, 0x9a,
	0x89, 0x7c, 0x50, 0x76, 0x3a, 0x79, 0x01, 0xc3, 0xc2, 0x10, 0x57, 0xb6, 0xaa, 0xcd, 0xf6, 0x63,
	0x75, 0x14, 0xa5, 0x6e, 0x39, 0x53, 0xef, 0xad, 0x16, 0x1f, 0xad, 0x16, 0x9f, 0xad, 0x16, 0x6f,
	0x5f, 0xfa, 0xe0, 0x21, 0x9d, 0x5c, 0x6f, 0x77, 0x5a, 0xa5, 0x71, 0xa0, 0xab, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0x97, 0x5d, 0x71, 0x3a, 0x01, 0x00, 0x00,
}

func (m *CreateNewPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNewPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNewPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Participation) > 0 {
		i -= len(m.Participation)
		copy(dAtA[i:], m.Participation)
		i = encodeVarintActions(dAtA, i, uint64(len(m.Participation)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatePubKey) > 0 {
		i -= len(m.CreatePubKey)
		copy(dAtA[i:], m.CreatePubKey)
		i = encodeVarintActions(dAtA, i, uint64(len(m.CreatePubKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.LeaderBlockProducer != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.LeaderBlockProducer))
		i--
		dAtA[i] = 0x28
	}
	if m.EndEpoch != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.EndEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.StartEpoch != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActions(dAtA []byte, offset int, v uint64) int {
	offset -= sovActions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateNewPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActions(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovActions(uint64(m.Status))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovActions(uint64(m.StartEpoch))
	}
	if m.EndEpoch != 0 {
		n += 1 + sovActions(uint64(m.EndEpoch))
	}
	if m.LeaderBlockProducer != 0 {
		n += 1 + sovActions(uint64(m.LeaderBlockProducer))
	}
	l = len(m.CreatePubKey)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.Participation)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovActions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActions(x uint64) (n int) {
	return sovActions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateNewPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNewPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNewPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpoch", wireType)
			}
			m.EndEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderBlockProducer", wireType)
			}
			m.LeaderBlockProducer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderBlockProducer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatePubKey = append(m.CreatePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.CreatePubKey == nil {
				m.CreatePubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participation = append(m.Participation[:0], dAtA[iNdEx:postIndex]...)
			if m.Participation == nil {
				m.Participation = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActions = fmt.Errorf("proto: unexpected end of group")
)
