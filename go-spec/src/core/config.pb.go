// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/core/config.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PoolsChainConfig struct {
	GenesisSeed        []byte `protobuf:"bytes,1,opt,name=GenesisSeed,proto3" json:"GenesisSeed,omitempty"`
	GenesisEpoch       uint64 `protobuf:"varint,2,opt,name=GenesisEpoch,proto3" json:"GenesisEpoch,omitempty"`
	VaultSize          uint64 `protobuf:"varint,3,opt,name=VaultSize,proto3" json:"VaultSize,omitempty"`
	BaseEth2DutyReward uint64 `protobuf:"varint,4,opt,name=BaseEth2DutyReward,proto3" json:"BaseEth2DutyReward,omitempty"`
	DKGReward          uint64 `protobuf:"varint,5,opt,name=DKGReward,proto3" json:"DKGReward,omitempty"`
	// slots and epochs
	SlotsInEpoch                 uint64 `protobuf:"varint,6,opt,name=SlotsInEpoch,proto3" json:"SlotsInEpoch,omitempty"`
	MinAttestationCommitteeSize  uint64 `protobuf:"varint,7,opt,name=MinAttestationCommitteeSize,proto3" json:"MinAttestationCommitteeSize,omitempty"`
	MaxAttestationCommitteeSize  uint64 `protobuf:"varint,8,opt,name=MaxAttestationCommitteeSize,proto3" json:"MaxAttestationCommitteeSize,omitempty"`
	MinAttestationInclusionDelay uint64 `protobuf:"varint,9,opt,name=MinAttestationInclusionDelay,proto3" json:"MinAttestationInclusionDelay,omitempty"`
	// initial value constants
	ZeroHash []byte `protobuf:"bytes,10,opt,name=ZeroHash,proto3" json:"ZeroHash,omitempty"`
	// domain
	DomainBeaconProposer []byte   `protobuf:"bytes,11,opt,name=DomainBeaconProposer,proto3" json:"DomainBeaconProposer,omitempty"`
	DomainBeaconAttester []byte   `protobuf:"bytes,12,opt,name=DomainBeaconAttester,proto3" json:"DomainBeaconAttester,omitempty"`
	DomainRandao         []byte   `protobuf:"bytes,13,opt,name=DomainRandao,proto3" json:"DomainRandao,omitempty"`
	GenesisForkVersion   []byte   `protobuf:"bytes,14,opt,name=GenesisForkVersion,proto3" json:"GenesisForkVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolsChainConfig) Reset()         { *m = PoolsChainConfig{} }
func (m *PoolsChainConfig) String() string { return proto.CompactTextString(m) }
func (*PoolsChainConfig) ProtoMessage()    {}
func (*PoolsChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0189c35229c86e3, []int{0}
}
func (m *PoolsChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsChainConfig.Merge(m, src)
}
func (m *PoolsChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *PoolsChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsChainConfig proto.InternalMessageInfo

func (m *PoolsChainConfig) GetGenesisSeed() []byte {
	if m != nil {
		return m.GenesisSeed
	}
	return nil
}

func (m *PoolsChainConfig) GetGenesisEpoch() uint64 {
	if m != nil {
		return m.GenesisEpoch
	}
	return 0
}

func (m *PoolsChainConfig) GetVaultSize() uint64 {
	if m != nil {
		return m.VaultSize
	}
	return 0
}

func (m *PoolsChainConfig) GetBaseEth2DutyReward() uint64 {
	if m != nil {
		return m.BaseEth2DutyReward
	}
	return 0
}

func (m *PoolsChainConfig) GetDKGReward() uint64 {
	if m != nil {
		return m.DKGReward
	}
	return 0
}

func (m *PoolsChainConfig) GetSlotsInEpoch() uint64 {
	if m != nil {
		return m.SlotsInEpoch
	}
	return 0
}

func (m *PoolsChainConfig) GetMinAttestationCommitteeSize() uint64 {
	if m != nil {
		return m.MinAttestationCommitteeSize
	}
	return 0
}

func (m *PoolsChainConfig) GetMaxAttestationCommitteeSize() uint64 {
	if m != nil {
		return m.MaxAttestationCommitteeSize
	}
	return 0
}

func (m *PoolsChainConfig) GetMinAttestationInclusionDelay() uint64 {
	if m != nil {
		return m.MinAttestationInclusionDelay
	}
	return 0
}

func (m *PoolsChainConfig) GetZeroHash() []byte {
	if m != nil {
		return m.ZeroHash
	}
	return nil
}

func (m *PoolsChainConfig) GetDomainBeaconProposer() []byte {
	if m != nil {
		return m.DomainBeaconProposer
	}
	return nil
}

func (m *PoolsChainConfig) GetDomainBeaconAttester() []byte {
	if m != nil {
		return m.DomainBeaconAttester
	}
	return nil
}

func (m *PoolsChainConfig) GetDomainRandao() []byte {
	if m != nil {
		return m.DomainRandao
	}
	return nil
}

func (m *PoolsChainConfig) GetGenesisForkVersion() []byte {
	if m != nil {
		return m.GenesisForkVersion
	}
	return nil
}

func init() {
	proto.RegisterType((*PoolsChainConfig)(nil), "state.PoolsChainConfig")
}

func init() { proto.RegisterFile("src/core/config.proto", fileDescriptor_d0189c35229c86e3) }

var fileDescriptor_d0189c35229c86e3 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x4e, 0x22, 0x31,
	0x14, 0x86, 0x77, 0x76, 0x81, 0x85, 0xc2, 0x6e, 0x36, 0xcd, 0x6e, 0xd2, 0xac, 0x64, 0x42, 0xb8,
	0xe2, 0x0a, 0x12, 0xbc, 0xf4, 0x46, 0x87, 0x41, 0x24, 0xc6, 0x84, 0x0c, 0x09, 0x17, 0xdc, 0xd5,
	0xe1, 0xe8, 0x34, 0x0e, 0x3d, 0xa4, 0x2d, 0x51, 0x7c, 0x02, 0x1f, 0xc1, 0x47, 0xf2, 0xd2, 0x47,
	0x30, 0xf8, 0x22, 0x66, 0x3a, 0x23, 0x82, 0x02, 0x97, 0xfd, 0xcf, 0x77, 0xfe, 0xfe, 0xed, 0x39,
	0xe4, 0x9f, 0x56, 0x61, 0x2b, 0x44, 0x05, 0xad, 0x10, 0xe5, 0x95, 0xb8, 0x6e, 0xce, 0x14, 0x1a,
	0xa4, 0x79, 0x6d, 0xb8, 0x81, 0xfa, 0x43, 0x9e, 0xfc, 0x19, 0x20, 0xc6, 0xba, 0x13, 0x71, 0x21,
	0x3b, 0x96, 0xa0, 0x35, 0x52, 0xee, 0x81, 0x04, 0x2d, 0xf4, 0x10, 0x60, 0xc2, 0x9c, 0x9a, 0xd3,
	0xa8, 0x04, 0xeb, 0x12, 0xad, 0x93, 0x4a, 0x76, 0xec, 0xce, 0x30, 0x8c, 0xd8, 0xf7, 0x9a, 0xd3,
	0xc8, 0x05, 0x1b, 0x1a, 0xad, 0x92, 0xd2, 0x88, 0xcf, 0x63, 0x33, 0x14, 0xf7, 0xc0, 0x7e, 0x58,
	0xe0, 0x43, 0xa0, 0x4d, 0x42, 0x3d, 0xae, 0xa1, 0x6b, 0xa2, 0xb6, 0x3f, 0x37, 0x8b, 0x00, 0x6e,
	0xb9, 0x9a, 0xb0, 0x9c, 0xc5, 0xb6, 0x54, 0x12, 0x37, 0xff, 0xbc, 0x97, 0x61, 0xf9, 0xd4, 0x6d,
	0x25, 0x24, 0x79, 0x86, 0x31, 0x1a, 0xdd, 0x97, 0x69, 0x9e, 0x42, 0x9a, 0x67, 0x5d, 0xa3, 0xc7,
	0xe4, 0xe0, 0x42, 0xc8, 0x13, 0x63, 0x20, 0x79, 0xba, 0x40, 0xd9, 0xc1, 0xe9, 0x54, 0x18, 0x03,
	0x60, 0x13, 0xfe, 0xb4, 0x2d, 0xfb, 0x10, 0xeb, 0xc0, 0xef, 0x76, 0x3a, 0x14, 0x33, 0x87, 0xdd,
	0x08, 0xf5, 0x48, 0x75, 0xf3, 0x82, 0xbe, 0x0c, 0xe3, 0xb9, 0x16, 0x28, 0x7d, 0x88, 0xf9, 0x82,
	0x95, 0xac, 0xc5, 0x5e, 0x86, 0xfe, 0x27, 0xc5, 0x31, 0x28, 0x3c, 0xe3, 0x3a, 0x62, 0xc4, 0x8e,
	0x66, 0x75, 0xa6, 0x6d, 0xf2, 0xd7, 0xc7, 0x29, 0x17, 0xd2, 0x03, 0x1e, 0xa2, 0x1c, 0x28, 0x9c,
	0xa1, 0x06, 0xc5, 0xca, 0x96, 0xdb, 0x5a, 0xfb, 0xdc, 0x93, 0x5e, 0x0c, 0x8a, 0x55, 0xbe, 0xf6,
	0xbc, 0xd7, 0x92, 0xff, 0x4e, 0xf5, 0x80, 0xcb, 0x09, 0x47, 0xf6, 0xcb, 0xb2, 0x1b, 0x5a, 0x32,
	0xe1, 0x6c, 0x1f, 0x4e, 0x51, 0xdd, 0x8c, 0x40, 0x25, 0x4f, 0x60, 0xbf, 0x2d, 0xb9, 0xa5, 0xe2,
	0xb1, 0xa7, 0xa5, 0xeb, 0x3c, 0x2f, 0x5d, 0xe7, 0x65, 0xe9, 0x3a, 0x8f, 0xaf, 0xee, 0xb7, 0x71,
	0xa1, 0x79, 0x94, 0x2c, 0xee, 0x65, 0xc1, 0xae, 0xec, 0xe1, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0x59, 0x28, 0xa6, 0xcb, 0x02, 0x00, 0x00,
}

func (m *PoolsChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GenesisForkVersion) > 0 {
		i -= len(m.GenesisForkVersion)
		copy(dAtA[i:], m.GenesisForkVersion)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.GenesisForkVersion)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DomainRandao) > 0 {
		i -= len(m.DomainRandao)
		copy(dAtA[i:], m.DomainRandao)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.DomainRandao)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DomainBeaconAttester) > 0 {
		i -= len(m.DomainBeaconAttester)
		copy(dAtA[i:], m.DomainBeaconAttester)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.DomainBeaconAttester)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DomainBeaconProposer) > 0 {
		i -= len(m.DomainBeaconProposer)
		copy(dAtA[i:], m.DomainBeaconProposer)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.DomainBeaconProposer)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ZeroHash) > 0 {
		i -= len(m.ZeroHash)
		copy(dAtA[i:], m.ZeroHash)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ZeroHash)))
		i--
		dAtA[i] = 0x52
	}
	if m.MinAttestationInclusionDelay != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MinAttestationInclusionDelay))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxAttestationCommitteeSize != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxAttestationCommitteeSize))
		i--
		dAtA[i] = 0x40
	}
	if m.MinAttestationCommitteeSize != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MinAttestationCommitteeSize))
		i--
		dAtA[i] = 0x38
	}
	if m.SlotsInEpoch != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.SlotsInEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.DKGReward != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.DKGReward))
		i--
		dAtA[i] = 0x28
	}
	if m.BaseEth2DutyReward != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.BaseEth2DutyReward))
		i--
		dAtA[i] = 0x20
	}
	if m.VaultSize != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.VaultSize))
		i--
		dAtA[i] = 0x18
	}
	if m.GenesisEpoch != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.GenesisEpoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GenesisSeed) > 0 {
		i -= len(m.GenesisSeed)
		copy(dAtA[i:], m.GenesisSeed)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.GenesisSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolsChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisSeed)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.GenesisEpoch != 0 {
		n += 1 + sovConfig(uint64(m.GenesisEpoch))
	}
	if m.VaultSize != 0 {
		n += 1 + sovConfig(uint64(m.VaultSize))
	}
	if m.BaseEth2DutyReward != 0 {
		n += 1 + sovConfig(uint64(m.BaseEth2DutyReward))
	}
	if m.DKGReward != 0 {
		n += 1 + sovConfig(uint64(m.DKGReward))
	}
	if m.SlotsInEpoch != 0 {
		n += 1 + sovConfig(uint64(m.SlotsInEpoch))
	}
	if m.MinAttestationCommitteeSize != 0 {
		n += 1 + sovConfig(uint64(m.MinAttestationCommitteeSize))
	}
	if m.MaxAttestationCommitteeSize != 0 {
		n += 1 + sovConfig(uint64(m.MaxAttestationCommitteeSize))
	}
	if m.MinAttestationInclusionDelay != 0 {
		n += 1 + sovConfig(uint64(m.MinAttestationInclusionDelay))
	}
	l = len(m.ZeroHash)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.DomainBeaconProposer)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.DomainBeaconAttester)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.DomainRandao)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.GenesisForkVersion)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolsChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisSeed = append(m.GenesisSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisSeed == nil {
				m.GenesisSeed = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisEpoch", wireType)
			}
			m.GenesisEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultSize", wireType)
			}
			m.VaultSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseEth2DutyReward", wireType)
			}
			m.BaseEth2DutyReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseEth2DutyReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DKGReward", wireType)
			}
			m.DKGReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DKGReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotsInEpoch", wireType)
			}
			m.SlotsInEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotsInEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAttestationCommitteeSize", wireType)
			}
			m.MinAttestationCommitteeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAttestationCommitteeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAttestationCommitteeSize", wireType)
			}
			m.MaxAttestationCommitteeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAttestationCommitteeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAttestationInclusionDelay", wireType)
			}
			m.MinAttestationInclusionDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAttestationInclusionDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZeroHash = append(m.ZeroHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ZeroHash == nil {
				m.ZeroHash = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainBeaconProposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainBeaconProposer = append(m.DomainBeaconProposer[:0], dAtA[iNdEx:postIndex]...)
			if m.DomainBeaconProposer == nil {
				m.DomainBeaconProposer = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainBeaconAttester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainBeaconAttester = append(m.DomainBeaconAttester[:0], dAtA[iNdEx:postIndex]...)
			if m.DomainBeaconAttester == nil {
				m.DomainBeaconAttester = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainRandao", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainRandao = append(m.DomainRandao[:0], dAtA[iNdEx:postIndex]...)
			if m.DomainRandao == nil {
				m.DomainRandao = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisForkVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisForkVersion = append(m.GenesisForkVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisForkVersion == nil {
				m.GenesisForkVersion = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
